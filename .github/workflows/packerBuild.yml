name: Packer Image Builder for GCP

on:
  pull_request:
    branches:
      - main
      - development

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: 1.7.3

      - name: Set up GCP Service Account
        uses: google-github-actions/auth@v2
        id: auth
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: gcloud CLI
        run: gcloud info

      - name: Zip Project
        run: zip -r webapp.zip .

      - name: Verify Zip
        run: ls -l

      - name: Packer init
        run: packer init ./packer/.

      - name: Format Packer template
        run: packer fmt -check ./packer/.

      - name: Verify scripts
        run: ls -l ./packer/scripts

      - name: Validate Packer template
        run: packer validate -var 'project_id=${{secrets.PROJECT_ID}}' -var 'zone=${{secrets.ZONE}}' ./packer/.

      - name: Build Packer Image
        run: packer build -var 'project_id=${{secrets.PROJECT_ID}}' -var 'zone=${{secrets.ZONE}}' ./packer/. | tee build.log

      - name: Extract Image Name
        run: |
          IMAGE_NAME=$(grep -oP 'A disk image was created in the .+ project: \K.+' build.log)
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: Authenticate with gcloud CLI
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json

      - name: Generate a unique template name
        id: vars
        run: echo "TEMPLATE_NAME=template-$(date +%Y%m%d%H%M%S)-${{ secrets.TEMPLATE_NAME }}" >> $GITHUB_ENV

      - name: Retrieve database password and host secrets
        run: |
          echo ${{ steps.build.outputs.image_name }}
          echo "DB_PASSWORD=$(gcloud secrets versions access latest --secret=db_password)" >> $GITHUB_ENV
          echo "DB_HOST=$(gcloud secrets versions access latest --secret=db_host)" >> $GITHUB_ENV
          # print the secrets and image name
          echo $DB_PASSWORD
          echo $DB_HOST

      - name: Create a new instance template
        run: |
          gcloud compute instance-templates create ${{ env.TEMPLATE_NAME }} \
            --region=us-east1 \
            --machine-type=e2-standard-2 \
            --image=projects/csye6225-cloud-dev-415002/global/images/${{env.IMAGE_NAME}} \
            --boot-disk-type=pd-standard \
            --boot-disk-kms-key=projects/csye6225-cloud-dev-415002/locations/us-east1/keyRings/my-key-ring-cc85c4d1/cryptoKeys/vm-key \
            --subnet=webapp-subnet \
            --service-account=vm-instance-account@csye6225-cloud-dev-415002.iam.gserviceaccount.com \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --tags=webapp \
            --metadata=db_host=${{env.DB_HOST}},db_name=webapp,db_password=${{env.DB_PASSWORD}},db_user=webapp,startup-script=\#\!/bin/bash$'\n'$'\n'DB_NAME=\$\(curl\ http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_name\ -H\ \"Metadata-Flavor:\ Google\"\)$'\n'DB_USER=\$\(curl\ http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_user\ -H\ \"Metadata-Flavor:\ Google\"\)$'\n'DB_PASSWORD=\$\(curl\ http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_password\ -H\ \"Metadata-Flavor:\ Google\"\)$'\n'DB_HOST=\$\(curl\ http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_host\ -H\ \"Metadata-Flavor:\ Google\"\)$'\n'$'\n'cat\ \>\ /opt/webapp/.env.development\ \<\<\ EOF$'\n'PORT=8080$'\n'HOST=\"localhost\"$'\n'DB_DIALECT=\"mysql\"$'\n'DB_NAME=\$DB_NAME$'\n'DB_USER=\$DB_USER$'\n'DB_PASSWORD=\$DB_PASSWORD\ $'\n'DB_HOST=\$DB_HOST$'\n'$'\n'GCLOUD_PROJECT_ID=\"csye6225-cloud-dev-415002\"$'\n'$'\n'EMAIL_VERIFICATION_TIMEOUT\ =\ 300000$'\n'EOF$'\n'$'\n'sudo\ systemctl\ start\ webapp.service$'\n'

        # run: |
        #   gcloud compute instance-templates create ${{ env.TEMPLATE_NAME }} \
        #     --instance-template-region=${{ secrets.REGION }} \
        #     --region=${{ secrets.REGION }} \
        #     --machine-type=${{ secrets.MACHINE_TYPE }} \
        #     --image= ${{ steps.build.outputs.image_name }} \
        #     --boot-disk-size=${{ secrets.DISK_SIZE_GB }} \
        #     --boot-disk-type=${{ secrets.DISK_TYPE }} \
        #     --boot-disk-kms-key=$KMS_KEY_SELF_LINK
        #     --network=${{ secrets.NETWORK }} \
        #     --subnet=${{ secrets.SUBNETWORK }} \
        #     --service-account=${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
        #     --scopes=https://www.googleapis.com/auth/cloud-platform
        #     --tags=${{ secrets.TAGS }} \
        #     --metadata=db_host=10.95.0.23,db_name=webapp,db_password=:CxFnB\{Xx\]Hhl\}\>F,db_user=webapp,startup-script=\#\!/bin/bash$'\n'$'\n'DB_NAME=\$\(curl\ http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_name\ -H\ \"Metadata-Flavor:\ Google\"\)$'\n'DB_USER=\$\(curl\ http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_user\ -H\ \"Metadata-Flavor:\ Google\"\)$'\n'DB_PASSWORD=\$\(curl\ http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_password\ -H\ \"Metadata-Flavor:\ Google\"\)$'\n'DB_HOST=\$\(curl\ http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_host\ -H\ \"Metadata-Flavor:\ Google\"\)$'\n'$'\n'cat\ \>\ /opt/webapp/.env.development\ \<\<\ EOF$'\n'PORT=8080$'\n'HOST=\"localhost\"$'\n'DB_DIALECT=\"mysql\"$'\n'DB_NAME=\$DB_NAME$'\n'DB_USER=\$DB_USER$'\n'DB_PASSWORD=\$DB_PASSWORD\ $'\n'DB_HOST=\$DB_HOST$'\n'$'\n'GCLOUD_PROJECT_ID=\"csye6225-cloud-dev-415002\"$'\n'$'\n'EMAIL_VERIFICATION_TIMEOUT\ =\ 300000$'\n'EOF$'\n'$'\n'sudo\ systemctl\ start\ webapp.service$'\n'

      - name: Update managed instance group to use new template
        run: |
          gcloud compute instance-groups managed set-instance-template ${{ secrets.INSTANCE_GROUP_NAME }} \
            --template=${{ env.TEMPLATE_NAME }} \
            --region=${{ secrets.REGION }}

      - name: Recreate instances in the managed instance group
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ secrets.INSTANCE_GROUP_NAME }} \
            --version template=${{ env.TEMPLATE_NAME }} \
            --region=${{ secrets.REGION }} \
            --type=opportunistic

      # - name: Wait for the instance group update to complete
      #   run: |
      #     while : ; do
      #       status=$(gcloud compute instance-groups managed describe ${{ secrets.INSTANCE_GROUP_NAME }} --region=${{ secrets.REGION }} --format='value(status.isStable)')
      #       [[ "$status" == "True" ]] && break || echo "Waiting for update to complete"
      #       sleep 30
      #     done
